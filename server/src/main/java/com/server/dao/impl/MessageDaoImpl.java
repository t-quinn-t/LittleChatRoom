package com.server.dao.impl;
/**
 * @author Qintu (Quinn) Tao
 */

import com.server.dao.MessageDao;
import com.server.model.Message;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;
import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;

@Component
public class MessageDaoImpl extends JdbcDaoSupport implements MessageDao {

    public MessageDaoImpl(DataSource dataSource) {this.setDataSource(dataSource);}

    public Message save(Message message) {
        String sqlStr = "INSERT INTO public.messages (from_user, from_room, message_content) VALUES (" +
                "(SELECT user_id FROM public.users WHERE user_name = ?)" +
                ",?,?) RETURNING message_id;";
        KeyHolder keyHolder = new GeneratedKeyHolder();
        try {
            this.getJdbcTemplate().update(connection -> {
                PreparedStatement ps = connection.prepareStatement(sqlStr, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, message.getSender());
                ps.setLong(2, message.getRoomId());
                ps.setString(3, message.getContent());
                return ps;
            }, keyHolder);
            Number autoGeneratedKey = keyHolder.getKey();
            if (autoGeneratedKey == null) throw new NullPointerException("Auto generated key is not found when saving message");
            message.setId(autoGeneratedKey.longValue());
            return message;
        } catch (NullPointerException e) {
            throw new NullPointerException("Error Creating JDBCTemplate when processing in:" + this.getClass().toString());
        }

    }

    public void delete(Message message) {
        this.getJdbcTemplate().update(
                "DELETE FROM public.messages WHERE message_id = ?",
                message.getId()
        );
    }

    public Message getMessageByMessageId(Long messageId) {
        return DataAccessUtils.singleResult(getJdbcTemplate().query(
                "SELECT user_name, from_room, message_content FROM public.users " +
                        "INNER JOIN public.messages ON user_id = from_user WHERE from_room = ?",
                (resultSet, i) -> new Message(
                        resultSet.getString("user_name"),
                        resultSet.getLong("from_room"),
                        resultSet.getString("message_content")),
                messageId
        ));
    }

    public List<Message> getMessagesByRoomId(Long roomId) {
        return this.getJdbcTemplate().query(
                "SELECT user_name, from_room, message_content FROM public.users " +
                        "INNER JOIN public.messages ON user_id = from_user WHERE from_room = ? ORDER BY messages.sent_time",
                (resultSet, i) -> new Message(
                        resultSet.getString("user_name"),
                        resultSet.getLong("from_room"),
                        resultSet.getString("message_content")),
            roomId
        );
    }
}
