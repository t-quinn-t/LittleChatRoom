package com.server.dao.impl;
/**
 * @author Qintu (Quinn) Tao
 */
import com.server.dao.ChatroomDao;
import com.server.model.Chatroom;
import com.server.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;

@Component
public class ChatroomDaoImpl extends JdbcDaoSupport implements ChatroomDao {

    public ChatroomDaoImpl(DataSource dataSource) {
        this.setDataSource(dataSource);
    }

    public Chatroom save(Chatroom chatroom) {
        if (getJdbcTemplate() == null) throw new NullPointerException();
        String sql = "INSERT INTO public.chatrooms (room_name) VALUES (?) RETURNING room_id;";
        KeyHolder keyHolder = new GeneratedKeyHolder();
        getJdbcTemplate().update(connection -> {
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1,chatroom.getName());
            return ps;
        }, keyHolder);
        Number autoGeneratedKey = keyHolder.getKey();
        if (autoGeneratedKey == null) throw new NullPointerException();
        Chatroom storedChatroom = new Chatroom();
        storedChatroom.setName(chatroom.getName());
        storedChatroom.setRoomId(autoGeneratedKey.longValue());
        return storedChatroom;
    }

    public void delete(Long roomId) {
        if (getJdbcTemplate() == null) throw new NullPointerException();
        getJdbcTemplate().update(
                "DELETE FROM public.chatrooms WHERE room_id = ?",
                roomId
        );
    }

    public void updateChatroom(Chatroom chatroom) {
        if (getJdbcTemplate() == null) throw new NullPointerException();
        getJdbcTemplate().update(
            "UPDATE public.chatrooms " +
                "SET room_name=?" +
                "WHERE room_id=?",
            chatroom.getName(),
            chatroom.getRoomId()
        );
    }
    public Chatroom findRoomById(Long roomId) {
        if (getJdbcTemplate() == null) throw new NullPointerException();
        return DataAccessUtils.singleResult(getJdbcTemplate().query(
            "SELECT * FROM public.chatrooms WHERE room_id = ?",
            (resultSet, i) -> new Chatroom(
                resultSet.getString("room_name")),
            roomId
        ));
    }

    public Chatroom findRoomByName(String roomName) {
        if (getJdbcTemplate() == null) throw new NullPointerException();
        return DataAccessUtils.singleResult(getJdbcTemplate().query(
            "SELECT * FROM public.chatrooms WHERE room_name = ?",
            (resultSet, i) -> new Chatroom(
                resultSet.getLong("room_id"),
                resultSet.getString("room_name")),
            roomName
        ));
    }

    public List<Chatroom> findRoomsByUid(Long userId) {
        if (getJdbcTemplate() == null)
            throw new NullPointerException();
        String sql = "SELECT room_id, room_name FROM public.chatrooms INNER JOIN public.chatroom_user_mappings ON " +
                "public.chatroom_user_mappings.room_id = chatrooms.room_id WHERE chatroom_user_mappings.user_id = ?";
        return getJdbcTemplate().query(sql, (resultSet, i)-> {
            Chatroom room = new Chatroom();
            room.setRoomId(resultSet.getLong(1));
            room.setName(resultSet.getString(2));
            return room;
        }, userId);
    }

    public void registerUserToRoom(User user, Chatroom room) {
        if (getJdbcTemplate() == null)
            throw new NullPointerException();
        String sql = "INSERT INTO public.chatroom_user_mappings (user_id, room_id, user_nickname, as_role) VALUES(?,?,?,?)";
        getJdbcTemplate().update(sql, user.getId(), room.getRoomId(), user.getName(), 0);
    }
}
